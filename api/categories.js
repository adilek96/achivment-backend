export default function categories(
  app,
  prisma,
  { pickLang, normalizeNameTranslations, LANGS, isValidCuid, sanitizeString }
) {
  /**
   * @swagger
   * /categories:
   *   get:
   *     summary: –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   *     parameters:
   *       - in: query
   *         name: lang
   *         schema:
   *           type: string
   *           enum: [en, ru, tr, fr, de, ar, gr]
   *         description: –ö–æ–¥ —è–∑—ã–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤
   *     responses:
   *       200:
   *         description: –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
   *         content:
   *           application/json:
   *             schema:
   *               type: array
   *               items:
   *                 $ref: '#/components/schemas/Category'
   *             example:
   *               - id: "cmcdbzw5c0000lzgwqdktz0zl"
   *                 key: "begin"
   *                 name:
   *                   en: "Beginner"
   *                   ru: "–ù–∞—á–∏–Ω–∞—é—â–∏–π"
   *                 achievements:
   *                   - id: "cmcdbzw5c0000lzgwqdktz0zl"
   *                     title:
   *                       en: "First Achievement"
   *                       ru: "–ü–µ—Ä–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ"
   *                     description:
   *                       en: "Complete your first task"
   *                       ru: "–í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ"
   *                     icon: "üéØ"
   *                     hidden: false
   *                     target: 1
   *                     categoryId: "cmcdbzw5c0000lzgwqdktz0zl"
   *                     reward:
   *                       id: "cmcdbzw5c0000lzgwqdktz0zl"
   *                       type: "badge"
   *                       title:
   *                         en: "First Badge"
   *                         ru: "–ü–µ—Ä–≤—ã–π –∑–Ω–∞—á–æ–∫"
   *                       description:
   *                         en: "Your first achievement badge"
   *                         ru: "–í–∞—à –ø–µ—Ä–≤—ã–π –∑–Ω–∞—á–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è"
   *                       icon: "üèÜ"
   *                       isApplicable: true
   *                       details: {}
   *                       achievementId: "cmcdbzw5c0000lzgwqdktz0zl"
   *   post:
   *     summary: –°–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
   *     requestBody:
   *       required: true
   *       content:
   *         application/json:
   *           schema:
   *             type: object
   *             required:
   *               - key
   *               - name
   *             properties:
   *               key:
   *                 type: string
   *                 description: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   *                 example: "beginner"
   *               name:
   *                 type: object
   *                 description: –û–±—ä–µ–∫—Ç —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è
   *                 example:
   *                   en: "Beginner"
   *                   ru: "–ù–∞—á–∏–Ω–∞—é—â–∏–π"
   *                   tr: "Ba≈ülangƒ±√ß"
   *     responses:
   *       201:
   *         description: –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞
   *         content:
   *           application/json:
   *             schema:
   *               $ref: '#/components/schemas/Category'
   *       400:
   *         description: –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
   *       500:
   *         description: –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
   * /categories/{id}:
   *   get:
   *     summary: –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ ID
   *     parameters:
   *       - in: path
   *         name: id
   *         required: true
   *         schema:
   *           type: string
   *         description: ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   *       - in: query
   *         name: lang
   *         schema:
   *           type: string
   *           enum: [en, ru, tr, fr, de, ar, gr]
   *         description: –ö–æ–¥ —è–∑—ã–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤
   *     responses:
   *       200:
   *         description: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–∞–π–¥–µ–Ω–∞
   *         content:
   *           application/json:
   *             schema:
   *               $ref: '#/components/schemas/Category'
   *       404:
   *         description: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
   *   patch:
   *     summary: –û–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
   *     parameters:
   *       - in: path
   *         name: id
   *         required: true
   *         schema:
   *           type: string
   *         description: ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   *     requestBody:
   *       required: true
   *       content:
   *         application/json:
   *           schema:
   *             type: object
   *             properties:
   *               key:
   *                 type: string
   *                 description: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   *               name:
   *                 type: object
   *                 description: –û–±—ä–µ–∫—Ç —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è
   *                 example:
   *                   en: "Beginner"
   *                   ru: "–ù–∞—á–∏–Ω–∞—é—â–∏–π"
   *                   tr: "Ba≈ülangƒ±√ß"
   *     responses:
   *       200:
   *         description: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞
   *         content:
   *           application/json:
   *             schema:
   *               $ref: '#/components/schemas/Category'
   *       404:
   *         description: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
   *   delete:
   *     summary: –£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
   *     parameters:
   *       - in: path
   *         name: id
   *         required: true
   *         schema:
   *           type: string
   *         description: ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   *     responses:
   *       204:
   *         description: –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–¥–∞–ª–µ–Ω–∞
   *       404:
   *         description: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
   */
  app.get("/categories", async (req, res) => {
    try {
      const lang = req.query.lang; // ?lang=ru

      const rows = await prisma.achievementCategory.findMany({
        include: {
          achievements: { include: { reward: true } },
        },
      });
      // ‚îÄ‚îÄ 3. –õ–æ–∫–∞–ª–∏–∑—É–µ–º –≤—Å—ë –Ω—É–∂–Ω–æ–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
      const categories = rows.map((row) => ({
        ...row,

        // name –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        name: lang
          ? pickLang(row.name, lang)
          : normalizeNameTranslations(row.name),

        // title + description —É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
        achievements: row.achievements.map((ach) => ({
          ...ach,
          title: lang
            ? pickLang(ach.title, lang)
            : normalizeNameTranslations(ach.title),
          description: lang
            ? pickLang(ach.description, lang)
            : normalizeNameTranslations(ach.description),

          reward: ach.reward
            ? {
                ...ach.reward,
                title: lang
                  ? pickLang(ach.reward.title, lang)
                  : normalizeNameTranslations(ach.reward.title),
                description: lang
                  ? pickLang(ach.reward.description, lang)
                  : normalizeNameTranslations(ach.reward.description),
              }
            : null,
        })),
      }));

      res.json(categories);
    } catch (err) {
      console.error("GET /categories:", err);
      res.status(500).json({ error: err.message });
    }
  });

  app.get("/categories/:id", async (req, res) => {
    try {
      // 1 ‚ü∂ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —è–∑—ã–∫ ("ru‚ÄëRU" ‚Üí "ru")
      const rawLang = req.query.lang;
      const lang = rawLang?.split(/[-_]/)[0]?.toLowerCase();

      // 2 ‚ü∂ –±–µ—Ä—ë–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–º–µ—Å—Ç–µ —Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏
      const row = await prisma.achievementCategory.findUnique({
        where: { id: req.params.id },
        include: { achievements: { include: { reward: true } } },
      });
      if (!row) return res.status(404).json({ error: "Category not found" });

      // 3 ‚ü∂ –ª–æ–∫–∞–ª–∏–∑—É–µ–º –≤—Å—ë –Ω—É–∂–Ω–æ–µ
      const category = {
        ...row,
        name: lang
          ? pickLang(row.name, lang)
          : normalizeNameTranslations(row.name),

        achievements: row.achievements.map((ach) => ({
          ...ach,
          title: lang
            ? pickLang(ach.title, lang)
            : normalizeNameTranslations(ach.title),
          description: lang
            ? pickLang(ach.description, lang)
            : normalizeNameTranslations(ach.description),

          reward: ach.reward
            ? {
                ...ach.reward,
                title: lang
                  ? pickLang(ach.reward.title, lang)
                  : normalizeNameTranslations(ach.reward.title),
                description: lang
                  ? pickLang(ach.reward.description, lang)
                  : normalizeNameTranslations(ach.reward.description),
              }
            : null,
        })),
      };

      res.json(category);
    } catch (err) {
      console.error("GET /categories/:id:", err);
      res.status(500).json({ error: err.message });
    }
  });

  app.post("/categories", async (req, res) => {
    try {
      const { key, name } = req.body;

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
      if (!key || !name) {
        return res.status(400).json({
          error: "key –∏ name —è–≤–ª—è—é—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏",
        });
      }

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è key
      const sanitizedKey = sanitizeString(key);
      if (sanitizedKey.length < 2 || sanitizedKey.length > 50) {
        return res.status(400).json({
          error: "key –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤",
        });
      }

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ key
      const existingCategory = await prisma.achievementCategory.findUnique({
        where: { key: sanitizedKey },
      });

      if (existingCategory) {
        return res.status(409).json({
          error: "Category with this key already exists",
        });
      }

      // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤
      const nameTranslations = normalizeNameTranslations(name);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ –ø—É—Å—Ç–æ–π
      const hasValidTranslation = LANGS.some(
        (lang) => nameTranslations[lang].trim().length > 0
      );
      if (!hasValidTranslation) {
        return res.status(400).json({
          error: "At least one translation must be provided",
        });
      }

      const category = await prisma.achievementCategory.create({
        data: {
          key: sanitizedKey,
          name: nameTranslations,
        },
      });
      res.status(201).json(category);
    } catch (error) {
      console.error("Error in POST /categories:", error);
      res.status(500).json({ error: error.message });
    }
  });

  app.patch("/categories/:id", async (req, res) => {
    try {
      const { id } = req.params;
      const { key, name } = req.body;
      console.log("[PATCH /categories/:id] req.body:", req.body);
      const nameTranslations = normalizeNameTranslations(name);
      console.log(
        "[PATCH /categories/:id] nameTranslations:",
        nameTranslations
      );
      const category = await prisma.achievementCategory.update({
        where: { id },
        data: { key, name: nameTranslations },
      });
      res.json(category);
    } catch (error) {
      console.error("Error in PATCH /categories/:id:", error);
      res.status(500).json({ error: error.message });
    }
  });

  app.delete("/categories/:id", async (req, res) => {
    try {
      const { id } = req.params;
      await prisma.achievementCategory.delete({
        where: { id },
      });
      res.status(204).send();
    } catch (error) {
      res.status(500).json({ error: error.message });
    }
  });
}
