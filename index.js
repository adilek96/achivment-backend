import dotenv from "dotenv";
import express from "express";
import { PrismaClient } from "@prisma/client";
import swaggerJSDoc from "swagger-jsdoc";
import swaggerUi from "swagger-ui-express";
import cors from "cors";
import helmet from "helmet";
import { DEFAULT_LANGUAGE } from "./lib/translations.js";
import stats from "./api/stats.js";
import health from "./api/health.js";
import categories from "./api/categories.js";
import achievments from "./api/achievments.js";
import rewards from "./api/rewards.js";
import progress from "./api/progress.js";

dotenv.config();

const prisma = new PrismaClient({
  log: ["query", "info", "warn", "error"],
});

// Graceful shutdown
process.on("beforeExit", async () => {
  await prisma.$disconnect();
});

const app = express();
const PORT = process.env.PORT || 3005;

// Security middleware
app.use(helmet());

// CORS middleware
app.use(
  cors({
    origin: [
      "http://localhost:3001",
      "http://127.0.0.1:3001",
      "https://achivment-front.vercel.app",
      "https://achivment-front-git-main-achivment-front.vercel.app",
      "https://achivment-front-git-main-adilek96s-projects.vercel.app",
      "https://penny-test.fvds.ru",
      "https://test.aquadaddy.app",
    ],
    credentials: true,
    methods: ["GET", "POST", "PUT", "PATCH", "DELETE", "OPTIONS"],
    allowedHeaders: ["Content-Type", "Authorization"],
  })
);

// Language middleware
app.use((req, res, next) => {
  // –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Accept-Language –∏–ª–∏ query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
  const acceptLanguage = req.headers["accept-language"];
  const queryLanguage = req.query.lang;

  let language = DEFAULT_LANGUAGE;

  if (queryLanguage) {
    language = queryLanguage;
  } else if (acceptLanguage) {
    // –ü–∞—Ä—Å–∏–º Accept-Language –∑–∞–≥–æ–ª–æ–≤–æ–∫
    const languages = acceptLanguage.split(",").map((lang) => {
      const [code, quality = "1"] = lang.trim().split(";q=");
      return { code: code.split("-")[0], quality: parseFloat(quality) };
    });

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–∞—á–µ—Å—Ç–≤—É –∏ –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π
    languages.sort((a, b) => b.quality - a.quality);
    const supportedLanguage = languages.find((lang) =>
      ["en", "ru", "tr", "fr", "de", "ar", "gr"].includes(lang.code)
    );

    if (supportedLanguage) {
      language = supportedLanguage.code;
    }
  }

  req.language = language;
  next();
});

// Swagger configuration
const options = {
  definition: {
    openapi: "3.0.0",
    info: {
      title: "Achievement API",
      version: "1.0.0",
      description:
        "–ü–æ–ª–Ω–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π —Å API, SSE (Server-Sent Events) –∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å—é. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ—Å—Ç—å, real-time —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –ø–æ–ª–Ω—ã–π CRUD –¥–ª—è –≤—Å–µ—Ö —Å—É—â–Ω–æ—Å—Ç–µ–π.",
    },
    servers: [
      {
        url: "http://localhost:3005",
        description: "Development server",
      },
      {
        url: "https://test.aquadaddy.app",
        description: "Production server",
      },
    ],
    components: {
      schemas: {
        Category: {
          type: "object",
          properties: {
            id: {
              type: "string",
              description: "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (CUID)",
              example: "cmcdbzw5c0000lzgwqdktz0zl",
            },
            key: {
              type: "string",
              description: "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
              example: "beginner",
            },
            name: {
              type: "object",
              description: "–û–±—ä–µ–∫—Ç —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è",
              example: {
                en: "Beginner",
                ru: "–ù–∞—á–∏–Ω–∞—é—â–∏–π",
                tr: "Ba≈ülangƒ±√ß",
                fr: "D√©butant",
                de: "Anf√§nger",
                ar: "ŸÖÿ®ÿ™ÿØÿ¶",
                gr: "ŒëœÅœáŒ¨œÅŒπŒøœÇ",
              },
            },
            achievements: {
              type: "array",
              items: {
                $ref: "#/components/schemas/Achievement",
              },
              description: "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
            },
          },
          required: ["id", "key", "name"],
        },
        Achievement: {
          type: "object",
          properties: {
            id: {
              type: "string",
              description: "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è (CUID)",
              example: "cmcdbzw5c0000lzgwqdktz0zl",
            },
            title: {
              type: "object",
              description: "–û–±—ä–µ–∫—Ç —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞",
              example: {
                en: "First Achievement",
                ru: "–ü–µ—Ä–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ",
              },
            },
            description: {
              type: "object",
              description: "–û–±—ä–µ–∫—Ç —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è",
              example: {
                en: "Complete your first task",
                ru: "–í—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ",
              },
            },
            icon: {
              type: "string",
              description: "URL –∏–∫–æ–Ω–∫–∏ –∏–ª–∏ —ç–º–æ–¥–∑–∏",
              example: "üéØ",
            },
            hidden: {
              type: "boolean",
              description: "–°–∫—Ä—ã—Ç–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ",
              example: false,
            },
            target: {
              type: "integer",
              description: "–¶–µ–ª–µ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è",
              example: 1,
            },
            categoryId: {
              type: "string",
              description: "ID —Å–≤—è–∑–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (CUID)",
              example: "cmcdbzw5c0000lzgwqdktz0zl",
            },
            category: {
              $ref: "#/components/schemas/Category",
              description: "–°–≤—è–∑–∞–Ω–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è",
            },
            reward: {
              $ref: "#/components/schemas/Reward",
              description: "–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ (–º–æ–∂–µ—Ç –±—ã—Ç—å null)",
            },
            progress: {
              type: "array",
              items: {
                $ref: "#/components/schemas/UserAchievementProgress",
              },
              description: "–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é",
            },
          },
          required: ["id", "title", "description", "categoryId"],
        },
        Reward: {
          type: "object",
          properties: {
            id: {
              type: "string",
              description: "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–∞–≥—Ä–∞–¥—ã (CUID)",
              example: "cmcdbzw5c0000lzgwqdktz0zl",
            },
            type: {
              type: "string",
              enum: [
                "badge",
                "bonus_crypto",
                "discount_commission",
                "cat_accessories",
                "visual_effects",
              ],
              description: "–¢–∏–ø –Ω–∞–≥—Ä–∞–¥—ã",
              example: "badge",
            },
            title: {
              type: "object",
              description: "–û–±—ä–µ–∫—Ç —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –Ω–∞–≥—Ä–∞–¥—ã",
              example: {
                en: "First Badge",
                ru: "–ü–µ—Ä–≤—ã–π –∑–Ω–∞—á–æ–∫",
              },
            },
            description: {
              type: "object",
              description: "–û–±—ä–µ–∫—Ç —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã",
              example: {
                en: "Your first achievement badge",
                ru: "–í–∞—à –ø–µ—Ä–≤—ã–π –∑–Ω–∞—á–æ–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è",
              },
            },
            icon: {
              type: "string",
              description: "URL –∏–∫–æ–Ω–∫–∏ –Ω–∞–≥—Ä–∞–¥—ã –∏–ª–∏ —ç–º–æ–¥–∑–∏",
              example: "üèÜ",
            },
            isApplicable: {
              type: "boolean",
              description: "–ü—Ä–∏–º–µ–Ω–∏–º–æ—Å—Ç—å –Ω–∞–≥—Ä–∞–¥—ã",
              example: true,
            },
            details: {
              type: "object",
              description: "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –Ω–∞–≥—Ä–∞–¥—ã (JSON)",
              example: {
                amount: 100,
                currency: "USDT",
              },
            },
            achievementId: {
              type: "string",
              description: "ID —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è (CUID)",
              example: "cmcdbzw5c0000lzgwqdktz0zl",
            },
            achievement: {
              $ref: "#/components/schemas/Achievement",
              description: "–°–≤—è–∑–∞–Ω–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ",
            },
          },
          required: ["id", "type", "title", "description", "achievementId"],
        },
        UserAchievementProgress: {
          type: "object",
          properties: {
            id: {
              type: "string",
              description: "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ (CUID)",
              example: "cmcdbzw5c0000lzgwqdktz0zl",
            },
            userId: {
              type: "string",
              description: "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
              example: "user123",
            },
            achievementId: {
              type: "string",
              description: "ID –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è (CUID)",
              example: "cmcdbzw5c0000lzgwqdktz0zl",
            },
            progress: {
              type: "string",
              enum: ["INPROGRESS", "BLOCKED", "FINISHED"],
              description: "–°—Ç–∞—Ç—É—Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞",
              example: "INPROGRESS",
            },
            currentStep: {
              type: "integer",
              description: "–¢–µ–∫—É—â–∏–π —à–∞–≥ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞",
              example: 2,
            },
            createdAt: {
              type: "string",
              format: "date-time",
              description: "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è",
              example: "2024-01-15T10:30:00.000Z",
            },
            updatedAt: {
              type: "string",
              format: "date-time",
              description: "–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è",
              example: "2024-01-15T10:30:00.000Z",
            },
            achievement: {
              $ref: "#/components/schemas/Achievement",
              description: "–°–≤—è–∑–∞–Ω–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ",
            },
          },
          required: ["id", "userId", "achievementId", "progress"],
        },
        Error: {
          type: "object",
          properties: {
            error: {
              type: "string",
              description: "–û–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏",
              example: "Invalid categoryId format",
            },
          },
          required: ["error"],
        },
        Stats: {
          type: "object",
          properties: {
            categories: {
              type: "integer",
              description: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π",
              example: 5,
            },
            achievements: {
              type: "integer",
              description: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π",
              example: 25,
            },
            rewards: {
              type: "integer",
              description: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–≥—Ä–∞–¥",
              example: 20,
            },
            progress: {
              type: "integer",
              description: "–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –ø—Ä–æ–≥—Ä–µ—Å—Å–∞",
              example: 150,
            },
            progressStats: {
              type: "object",
              properties: {
                completed: {
                  type: "integer",
                  description: "–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è",
                  example: 80,
                },
                inProgress: {
                  type: "integer",
                  description: "–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ",
                  example: 60,
                },
                blocked: {
                  type: "integer",
                  description: "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è",
                  example: 10,
                },
              },
            },
            achievementStats: {
              type: "object",
              properties: {
                hidden: {
                  type: "integer",
                  description: "–°–∫—Ä—ã—Ç—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è",
                  example: 5,
                },
                visible: {
                  type: "integer",
                  description: "–í–∏–¥–∏–º—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è",
                  example: 20,
                },
              },
            },
            rewardStats: {
              type: "object",
              properties: {
                applicable: {
                  type: "integer",
                  description: "–ü—Ä–∏–º–µ–Ω–∏–º—ã–µ –Ω–∞–≥—Ä–∞–¥—ã",
                  example: 18,
                },
                total: {
                  type: "integer",
                  description: "–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–≥—Ä–∞–¥",
                  example: 20,
                },
              },
            },
          },
        },
      },
      parameters: {
        LangParam: {
          name: "lang",
          in: "query",
          description: "–ö–æ–¥ —è–∑—ã–∫–∞ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤",
          schema: {
            type: "string",
            enum: ["en", "ru", "tr", "fr", "de", "ar", "gr"],
          },
          example: "ru",
        },
        IdParam: {
          name: "id",
          in: "path",
          required: true,
          description: "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä (CUID)",
          schema: {
            type: "string",
            pattern: "^c[a-z0-9]{24}$",
          },
          example: "cmcdbzw5c0000lzgwqdktz0zl",
        },
        ClientIdParam: {
          name: "clientId",
          in: "query",
          required: true,
          description: "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è SSE",
          schema: {
            type: "string",
          },
          example: "user123",
        },
      },
    },
  },
  apis: ["./index.js", "./api/*.js"],
};

const LANGS = ["ru", "en", "tr", "fr", "de", "ar", "gr"];

/* ‚îÄ‚îÄ‚îÄ –£—Ç–∏–ª–∏—Ç—ã ‚îÄ‚îÄ‚îÄ */
// 1) –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç
function normalizeNameTranslations(name) {
  if (typeof name !== "object" || name === null) name = {}; // –µ—Å–ª–∏ name = —Å—Ç—Ä–æ–∫–∞/null
  return Object.fromEntries(
    LANGS.map((l) => [l, typeof name[l] === "string" ? name[l] : ""])
  );
}

// 2) –≤—ã—Ç—è–≥–∏–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —è–∑—ã–∫ (–±–µ–∑ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ ¬´–¥–µ—Ñ–æ–ª—Ç–∞¬ª)
function pickLang(nameObj, lang) {
  return typeof nameObj?.[lang] === "string" ? nameObj[lang] : "";
}

/* ‚îÄ‚îÄ‚îÄ –í–∞–ª–∏–¥–∞—Ü–∏—è ‚îÄ‚îÄ‚îÄ */
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ CUID
function isValidCuid(id) {
  return (
    typeof id === "string" && id.length >= 25 && /^c[a-z0-9]{24}$/.test(id)
  );
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–∞ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
function isValidTranslations(obj) {
  if (!obj || typeof obj !== "object") return false;
  return LANGS.every((lang) => typeof obj[lang] === "string");
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏–∏ —Å—Ç—Ä–æ–∫
function sanitizeString(str) {
  if (typeof str !== "string") return "";
  return str.trim().replace(/[<>]/g, "");
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ URL
function isValidUrl(url) {
  if (!url || typeof url !== "string") return false;
  try {
    new URL(url);
    return true;
  } catch {
    return false;
  }
}

const swaggerSpec = swaggerJSDoc(options);
app.use("/api-docs", swaggerUi.serve, swaggerUi.setup(swaggerSpec));

// Middleware
app.use(express.json());

// –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ (–∫—Ä–æ–º–µ SSE)
app.use((req, res, next) => {
  // –ù–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Content-Type –¥–ª—è SSE endpoint
  if (req.path === "/api/achievements-events") {
    return next();
  }
  res.setHeader("Content-Type", "application/json");
  next();
});

// –ü–µ—Ä–µ–¥–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –≤ API –º–æ–¥—É–ª–∏
const dependencies = {
  pickLang,
  normalizeNameTranslations,
  LANGS,
  DEFAULT_LANGUAGE,
  isValidCuid,
  sanitizeString,
  isValidUrl,
};

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∫–ª–∏–µ–Ω—Ç–æ–≤
let clients = [];

/**
 * @swagger
 * /api/achievements-events:
 *   get:
 *     summary: Server-Sent Events endpoint –¥–ª—è real-time —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 *     description: |
 *       –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç SSE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è real-time —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö.
 *       –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ heartbeat —Å–æ–æ–±—â–µ–Ω–∏—è
 *       –∏ graceful –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è.
 *     parameters:
 *       - $ref: '#/components/parameters/ClientIdParam'
 *     responses:
 *       200:
 *         description: SSE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
 *         content:
 *           text/event-stream:
 *             schema:
 *               type: string
 *             examples:
 *               connection_established:
 *                 summary: –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
 *                 value: "data: —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n\ndata: user123\n\n"
 *               heartbeat:
 *                 summary: Heartbeat —Å–æ–æ–±—â–µ–Ω–∏–µ
 *                 value: "data: heartbeat 2024-01-15T10:30:00.000Z\n\n"
 *               achievement_event:
 *                 summary: –°–æ–±—ã—Ç–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
 *                 value: 'data: {"type": "achievement_completed", "userId": "user123", "achievementId": "cmcdbzw5c0000lzgwqdktz0zl"}\n\n'
 *       400:
 *         description: Client ID –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 *             example:
 *               error: "Client ID is required"
 *     x-code-samples:
 *       - lang: JavaScript
 *         source: |
 *           const eventSource = new EventSource('/api/achievements-events?clientId=user123');
 *
 *           eventSource.onmessage = function(event) {
 *             console.log('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ:', event.data);
 *           };
 *
 *           eventSource.onerror = function(error) {
 *             console.error('–û—à–∏–±–∫–∞ SSE:', error);
 *           };
 */
// SSE endpoint
app.get("/api/achievements-events", (req, res) => {
  const clientId = req.query.clientId?.toString();

  if (!clientId) {
    return res.status(400).json({ error: "Client ID is required" });
  }

  console.log(
    "SSE connection attempt from:",
    req.ip,
    "with clientId:",
    clientId
  );

  // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
  clients = clients.filter((c) => c.id !== clientId);

  // –ó–∞–≥–æ–ª–æ–≤–∫–∏
  res.writeHead(200, {
    "Content-Type": "text/event-stream",
    "Cache-Control": "no-cache",
    Connection: "keep-alive",
    "Access-Control-Allow-Origin": "*",
    "Access-Control-Allow-Headers": "Cache-Control",
    "X-Accel-Buffering": "no",
  });
  res.flushHeaders();

  // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
  res.write(`data: —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ\n\n`);
  res.write(`data: ${clientId}\n\n`);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
  const client = { id: clientId, res };
  clients.push(client);
  console.log(`Client ${clientId} connected. Total clients: ${clients.length}`);

  // Ping –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫
  const interval = setInterval(() => {
    res.write(":\n\n");
  }, 30000);

  // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
  req.on("close", () => {
    clearInterval(interval);
    clients = clients.filter((c) => c.id !== clientId);
    console.log(
      `Client ${clientId} disconnected. Total clients: ${clients.length}`
    );
  });

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
  req.on("error", (err) => {
    clearInterval(interval);
    clients = clients.filter((c) => c.id !== clientId);
    console.error(`Request error with client ${clientId}:`, err.message);
  });

  res.on("error", (err) => {
    clearInterval(interval);
    clients = clients.filter((c) => c.id !== clientId);
    console.error(`Response error with client ${clientId}:`, err.message);
  });
});
/**
 * @swagger
 * /api/achievements-events:
 *   options:
 *     summary: CORS preflight –¥–ª—è SSE endpoint
 *     description: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç CORS preflight –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è SSE —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
 *     responses:
 *       200:
 *         description: CORS headers —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã
 *         headers:
 *           Access-Control-Allow-Origin:
 *             description: –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ origins
 *             schema:
 *               type: string
 *               example: "*"
 *           Access-Control-Allow-Methods:
 *             description: –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥—ã
 *             schema:
 *               type: string
 *               example: "GET, OPTIONS"
 *           Access-Control-Allow-Headers:
 *             description: –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
 *             schema:
 *               type: string
 *               example: "Cache-Control"
 */
// Preflight CORS
app.options("/api/achievements-events", (req, res) => {
  res.setHeader("Access-Control-Allow-Origin", "*");
  res.setHeader("Access-Control-Allow-Methods", "GET, OPTIONS");
  res.setHeader("Access-Control-Allow-Headers", "Cache-Control");
  res.status(204).end();
});

setInterval(() => {
  clients.forEach((client) => {
    client.res.write(`data: SSE heartbeat\n\n`); // ping
  });
}, 30000); // –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫

health(app, prisma);
categories(app, prisma, dependencies);
achievments(app, prisma, dependencies);
rewards(app, prisma, dependencies);
// progress(app, prisma, dependencies, clients);
stats(app, prisma);

/**
 * @swagger
 * /progress:
 *   get:
 *     summary: –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 *     responses:
 *       200:
 *         description: OK
 *   post:
 *     summary: –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               userId:
 *                 type: string
 *               achievementId:
 *                 type: string
 *               progress:
 *                 type: string
 *                 enum: [INPROGRESS, BLOCKED, FINISHED]
 *               currentStep:
 *                 type: integer
 *     responses:
 *       201:
 *         description: Created
 * /progress/user/{userId}:
 *   get:
 *     summary: –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 *     parameters:
 *       - in: path
 *         name: userId
 *         required: true
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: OK
 * /progress/user/{id}:
 *   get:
 *     summary: –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 *     responses:
 *       200:
 *         description: –ú–∞—Å—Å–∏–≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 type: object
 *                 properties:
 *                   id:
 *                     type: string
 *                   userId:
 *                     type: string
 *                   achievementId:
 *                     type: string
 *                   progress:
 *                     type: string
 *                     enum: [INPROGRESS, BLOCKED, FINISHED]
 *                   currentStep:
 *                     type: integer
 *                   achievement:
 *                     type: object
 *       404:
 *         description: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
 *       500:
 *         description: –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
 * /progress/{id}:
 *   patch:
 *     summary: –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             properties:
 *               userId:
 *                 type: string
 *               achievementId:
 *                 type: string
 *               progress:
 *                 type: string
 *                 enum: [INPROGRESS, BLOCKED, FINISHED]
 *               currentStep:
 *                 type: integer
 *     responses:
 *       200:
 *         description: OK
 *   delete:
 *     summary: –£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *     responses:
 *       204:
 *         description: No Content
 */
app.get("/progress", async (req, res) => {
  try {
    const progress = await prisma.userAchievementProgress.findMany({
      include: {
        achievement: true,
      },
    });
    res.json(progress);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

app.get("/progress/user/:id", async (req, res) => {
  try {
    const { id } = req.params;
    const progress = await prisma.userAchievementProgress.findMany({
      where: { userId: id },
      include: {
        achievement: true,
      },
    });
    res.json(progress);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

app.get("/progress/:id", async (req, res) => {
  try {
    const { id } = req.params;
    const progress = await prisma.userAchievementProgress.findUnique({
      where: { id },
      include: {
        achievement: true,
      },
    });
    if (!progress) {
      return res.status(404).json({ error: "Progress not found" });
    }
    res.json(progress);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

app.post("/progress", async (req, res) => {
  try {
    const lang = req.query.lang;
    const { userId, achievementId, progress, currentStep } = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!userId || !achievementId) {
      return res.status(400).json({
        error: "userId –∏ achievementId —è–≤–ª—è—é—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–æ–ª—è–º–∏",
      });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
    if (typeof userId !== "string" || typeof achievementId !== "string") {
      return res.status(400).json({
        error: "userId –∏ achievementId –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Å—Ç—Ä–æ–∫–∞–º–∏",
      });
    }

    if (
      currentStep !== undefined &&
      (typeof currentStep !== "number" || currentStep < 0)
    ) {
      return res.status(400).json({
        error: "currentStep –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º",
      });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è enum –∑–Ω–∞—á–µ–Ω–∏–π
    const validProgressValues = ["INPROGRESS", "BLOCKED", "FINISHED"];
    if (progress && !validProgressValues.includes(progress)) {
      return res.status(400).json({
        error: `Invalid progress value. Must be one of: ${validProgressValues.join(
          ", "
        )}`,
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    const achievement = await prisma.achievement.findUnique({
      where: { id: achievementId },
    });
    if (!achievement) {
      return res.status(404).json({ error: "Achievement not found" });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    const existingProgress = await prisma.userAchievementProgress.findUnique({
      where: {
        userId_achievementId: {
          userId,
          achievementId,
        },
      },
    });

    if (existingProgress) {
      return res.status(409).json({
        error: "Progress record already exists for this user and achievement",
        existingProgress,
      });
    }

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    let finalProgress = "INPROGRESS";
    let finalCurrentStep = currentStep || 0;

    // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω BLOCKED, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
    if (progress === "BLOCKED") {
      finalProgress = "BLOCKED";
    } else {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –ª–∏ —Ü–µ–ª—å
      if (achievement.target === 0 || finalCurrentStep >= achievement.target) {
        finalProgress = "FINISHED";
        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ currentStep –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç target
        if (achievement.target > 0) {
          finalCurrentStep = Math.min(finalCurrentStep, achievement.target);
        }
      } else if (progress === "FINISHED") {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ—Ç FINISHED, –Ω–æ —Ü–µ–ª—å –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞
        return res.status(400).json({
          error: "Cannot set progress to FINISHED when target is not reached",
          currentStep: finalCurrentStep,
          target: achievement.target,
        });
      }
    }

    const row = await prisma.userAchievementProgress.create({
      data: {
        userId,
        achievementId,
        progress: finalProgress,
        currentStep: finalCurrentStep,
      },
      include: {
        achievement: {
          include: {
            reward: true,
          },
        },
      },
    });

    // –õ–æ–∫–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –Ω–∞–≥—Ä–∞–¥—ã
    const progressRecord = {
      ...row,
      achievement: {
        ...row.achievement,
        title: lang
          ? pickLang(row.achievement.title, lang)
          : normalizeNameTranslations(row.achievement.title),
        description: lang
          ? pickLang(row.achievement.description, lang)
          : normalizeNameTranslations(row.achievement.description),
        reward: row.achievement.reward
          ? {
              ...row.achievement.reward,
              title: lang
                ? pickLang(row.achievement.reward.title, lang)
                : normalizeNameTranslations(row.achievement.reward.title),
              description: lang
                ? pickLang(row.achievement.reward.description, lang)
                : normalizeNameTranslations(row.achievement.reward.description),
            }
          : null,
      },
    };

    /* ---------- SSE‚Äë–æ–ø–æ–≤–µ—â–µ–Ω–∏–µ ---------- */

    const client = clients.find((c) => c.id.toString() === userId.toString());
    if (client) {
      try {
        client.res.write(
          `event: progress\ndata: ${JSON.stringify(progressRecord)}\n\n`
        );
      } catch (err) {
        clients = clients.filter((c) => c.id !== client.id);
      }
    }

    /* ---------- –§–∏–Ω–∞–ª—å–Ω—ã–π HTTP‚Äë–æ—Ç–≤–µ—Ç ---------- */
    return res.status(201).json(progressRecord);
  } catch (error) {
    console.error("Error in POST /progress:", error);
    res.status(500).json({ error: error.message });
  }
});

app.patch("/progress/:id", async (req, res) => {
  try {
    const { id } = req.params;
    const lang = req.query.lang;
    const { userId, achievementId, progress, currentStep } = req.body;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è ID
    if (!id) {
      return res.status(400).json({
        error: "ID —è–≤–ª—è–µ—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º",
      });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö
    if (userId !== undefined && typeof userId !== "string") {
      return res.status(400).json({
        error: "userId –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π",
      });
    }

    if (achievementId !== undefined && typeof achievementId !== "string") {
      return res.status(400).json({
        error: "achievementId –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π",
      });
    }

    if (
      currentStep !== undefined &&
      (typeof currentStep !== "number" || currentStep < 0)
    ) {
      return res.status(400).json({
        error: "currentStep –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º",
      });
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è enum –∑–Ω–∞—á–µ–Ω–∏–π
    const validProgressValues = ["INPROGRESS", "BLOCKED", "FINISHED"];
    if (progress && !validProgressValues.includes(progress)) {
      return res.status(400).json({
        error: `Invalid progress value. Must be one of: ${validProgressValues.join(
          ", "
        )}`,
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    const existingProgress = await prisma.userAchievementProgress.findUnique({
      where: { id },
      include: {
        achievement: {
          include: {
            reward: true,
          },
        },
      },
    });

    if (!existingProgress) {
      return res.status(404).json({ error: "Progress record not found" });
    }

    // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω achievementId, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
    let achievement = existingProgress.achievement;
    if (achievementId && achievementId !== existingProgress.achievementId) {
      achievement = await prisma.achievement.findUnique({
        where: { id: achievementId },
      });
      if (!achievement) {
        return res.status(404).json({ error: "Achievement not found" });
      }
    }

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    let finalProgress = existingProgress.progress;
    let finalCurrentStep =
      currentStep !== undefined ? currentStep : existingProgress.currentStep;

    // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω BLOCKED, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
    if (progress === "BLOCKED") {
      finalProgress = "BLOCKED";
    } else if (progress) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –ª–∏ —Ü–µ–ª—å –¥–ª—è FINISHED
      if (progress === "FINISHED") {
        if (achievement.target > 0 && finalCurrentStep < achievement.target) {
          return res.status(400).json({
            error: "Cannot set progress to FINISHED when target is not reached",
            currentStep: finalCurrentStep,
            target: achievement.target,
          });
        }
        finalProgress = "FINISHED";
      } else if (progress === "INPROGRESS") {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –ª–∏ —É–∂–µ —Ü–µ–ª—å
        if (achievement.target > 0 && finalCurrentStep >= achievement.target) {
          finalProgress = "FINISHED";
        } else {
          finalProgress = "INPROGRESS";
        }
      }
    } else {
      // –ï—Å–ª–∏ progress –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
      if (achievement.target === 0 || finalCurrentStep >= achievement.target) {
        finalProgress = "FINISHED";
        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ currentStep –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç target
        if (achievement.target > 0) {
          finalCurrentStep = Math.min(finalCurrentStep, achievement.target);
        }
      } else {
        finalProgress = "INPROGRESS";
      }
    }

    const row = await prisma.userAchievementProgress.update({
      where: { id },
      data: {
        userId: userId || existingProgress.userId,
        achievementId: achievementId || existingProgress.achievementId,
        progress: finalProgress,
        currentStep: finalCurrentStep,
      },
      include: {
        achievement: {
          include: {
            reward: true,
          },
        },
      },
    });

    // –õ–æ–∫–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –Ω–∞–≥—Ä–∞–¥—ã
    const progressRecord = {
      ...row,
      achievement: {
        ...row.achievement,
        title: lang
          ? pickLang(row.achievement.title, lang)
          : normalizeNameTranslations(row.achievement.title),
        description: lang
          ? pickLang(row.achievement.description, lang)
          : normalizeNameTranslations(row.achievement.description),
        reward: row.achievement.reward
          ? {
              ...row.achievement.reward,
              title: lang
                ? pickLang(row.achievement.reward.title, lang)
                : normalizeNameTranslations(row.achievement.reward.title),
              description: lang
                ? pickLang(row.achievement.reward.description, lang)
                : normalizeNameTranslations(row.achievement.reward.description),
            }
          : null,
      },
    };

    const targetUserId = userId || existingProgress.userId;
    const client = clients.find(
      (c) => c.id.toString() === targetUserId.toString()
    );
    if (client) {
      try {
        client.res.write(
          `event: progress\ndata: ${JSON.stringify(progressRecord)}\n\n`
        );
      } catch (err) {
        clients = clients.filter((c) => c.id !== client.id);
      }
    }

    res.json(progressRecord);
  } catch (error) {
    console.error("Error in PATCH /progress/:id:", error);
    res.status(500).json({ error: error.message });
  }
});

app.delete("/progress/:id", async (req, res) => {
  try {
    const { id } = req.params;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è ID
    if (!id) {
      return res.status(400).json({
        error: "ID —è–≤–ª—è–µ—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º",
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
    const existingProgress = await prisma.userAchievementProgress.findUnique({
      where: { id },
    });

    if (!existingProgress) {
      return res.status(404).json({ error: "Progress record not found" });
    }

    await prisma.userAchievementProgress.delete({
      where: { id },
    });
    res.status(204).send();
  } catch (error) {
    console.error("Error in DELETE /progress/:id:", error);
    res.status(500).json({ error: error.message });
  }
});

app.get("/progress/user/:id/:achievementId", async (req, res) => {
  try {
    const { id, achievementId } = req.params;
    const lang = req.query.lang;

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    if (!id || !achievementId) {
      return res.status(400).json({
        error:
          "ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ ID –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —è–≤–ª—è—é—Ç—Å—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏",
      });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
    const achievement = await prisma.achievement.findUnique({
      where: { id: achievementId },
    });

    if (!achievement) {
      return res.status(404).json({
        error: "Achievement not found",
        status: false,
      });
    }

    const row = await prisma.userAchievementProgress.findFirst({
      where: { userId: id, achievementId },
      include: {
        achievement: {
          include: {
            reward: true,
          },
        },
      },
    });

    if (!row) {
      return res.json({
        status: false,
        message: "Progress not found",
        userId: id,
        achievementId: achievementId,
      });
    }

    // –õ–æ–∫–∞–ª–∏–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –Ω–∞–≥—Ä–∞–¥—ã
    const progress = {
      ...row,
      achievement: {
        ...row.achievement,
        title: lang
          ? pickLang(row.achievement.title, lang)
          : normalizeNameTranslations(row.achievement.title),
        description: lang
          ? pickLang(row.achievement.description, lang)
          : normalizeNameTranslations(row.achievement.description),
        reward: row.achievement.reward
          ? {
              ...row.achievement.reward,
              title: lang
                ? pickLang(row.achievement.reward.title, lang)
                : normalizeNameTranslations(row.achievement.reward.title),
              description: lang
                ? pickLang(row.achievement.reward.description, lang)
                : normalizeNameTranslations(row.achievement.reward.description),
            }
          : null,
      },
    };

    res.json({ progress, status: true });
  } catch (error) {
    console.error("Error in GET /progress/user/:id/:achievementId:", error);
    res.status(500).json({ error: error.message });
  }
});

// Error handling middleware
app.use((error, req, res, next) => {
  console.error(error.stack);
  res.status(500).json({ error: "Something went wrong!" });
});

// 404 handler
app.use((req, res) => {
  res.status(404).json({ error: "Route not found" });
});

// Start server
app.listen(PORT, () => {
  console.log(`üöÄ Server running on port ${PORT}`);
  console.log(`üìä Database URL: ${process.env.DATABASE_URL}`);
  console.log(` Health check: http://localhost:${PORT}/health`);
  console.log(`üóÑÔ∏è  Database health: http://localhost:${PORT}/health/db`);
  console.log(`üìö Swagger docs: http://localhost:${PORT}/api-docs`);
});
